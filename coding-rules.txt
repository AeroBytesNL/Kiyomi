### PHP Coding Rules
1. **Class Organization**
    - Use PSR-4 autoloading standard
    - Controllers should extend the base `Controller` class
    - Follow Laravel's MVC pattern strictly
    - Place controllers in the appropriate module namespace (`Modules\ModuleName\Http\Controllers`)

2. **Method Naming and Structure**
    - Use camelCase for method names
    - Follow RESTful naming conventions for controller methods (`index`, `create`, `store`, `show`, `edit`, `update`, `destroy`)
    - Keep methods focused and single-responsibility

3. **Routing**
    - Group related routes using `Route::group()`
    - Use middleware groups for authentication and role-based access
    - Use named routes with the pattern `resource.action`
    - Use resource routes when implementing CRUD operations

4. **View Organization**
    - Use Blade templates with `.blade.php` extension
    - Extend master layouts using `@extends`
    - Use sections with and `@section``@stop`
    - Follow module-based view organization (`modulename::viewname`)

### JavaScript Coding Rules
1. **Function Organization**
    - Use function declarations for main features
    - Use camelCase for function and variable names
    - Place event listeners in `DOMContentLoaded` events when dealing with DOM elements

2. **Event Handling**
    - Use `addEventListener` instead of inline event handlers
    - Group related event listeners together
    - Handle form validation in separate functions

3. **Data Management**
    - Use for client-side data persistence `localStorage`
    - Check for feature availability before using browser APIs
    - Use const for values that won't be reassigned
    - Use let for variables that will be reassigned

4. **Time and Date Handling**
    - Use consistent date/time formatting
    - Consider timezone differences in date/time operations
    - Use proper date manipulation methods

### HTML/Blade Template Rules
1. **Layout Structure**
    - Use Bootstrap classes for layout and styling
    - Implement responsive design patterns
    - Use proper semantic HTML elements
    - Keep consistent indentation

2. **Form Handling**
    - Include CSRF protection () `@csrf`
    - Use proper form method and action attributes
    - Implement proper input validation
    - Use Laravel's route helpers for form actions

3. **Component Usage**
    - Use Blade components with x- prefix
    - Keep components modular and reusable
    - Follow consistent naming convention for components

### Module Organization
1. **File Structure**
    - Organize code into modules
    - Keep module-specific assets in the module directory
    - Use proper namespacing for module components
    - Include module-specific configuration when needed

2. **Asset Management**
    - Use Vite for asset compilation
    - Keep module-specific assets separate
    - Use proper path resolution for module assets

